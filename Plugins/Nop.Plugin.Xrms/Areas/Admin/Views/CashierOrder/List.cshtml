@model CurrentOrderListPageViewModel
@inject AdminAreaSettings adminAreaSettings
@{
    Layout = "_AdminLayout";
    var defaultGridPageSize = adminAreaSettings.DefaultGridPageSize;
    var gridPageSizes = adminAreaSettings.GridPageSizes;

    //page title
    ViewBag.Title = T("Xrms.Admin.Cashier.Orders.List.Title").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("CashierOrders");

    Html.AddScriptParts(ResourceLocation.Head, "~/Plugins/Xrms/Content/lib/signalr/signalr.js");
}

<nop-antiforgery-token />
<div class="content-header clearfix">
    <h1 class="pull-left">
        @T("Xrms.Admin.Cashier.Orders.List.Title")
    </h1>
    <div class="pull-right">
        <a asp-action="Create" class="btn bg-blue">
            <i class="fa fa-plus-square"></i>
            @T("Admin.Common.AddNew")
        </a>
        @await Component.InvokeAsync("AdminWidget", new { widgetZone = "admin_current_order_list_buttons" })
    </div>
</div>

<div class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default panel-search">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="col-md-4">
                                    <nop-label asp-for="SearchModel.SearchTableName" />
                                </div>
                                <div class="col-md-8">
                                    <nop-editor asp-for="SearchModel.SearchTableName" />
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-8 col-md-offset-4">
                                    <button type="button" id="search-orders" class="btn btn-primary btn-search"><i class="fa fa-search"></i>@T("Admin.Common.Search")</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="panel panel-default">
                <div class="panel-body">
                    <div id="orders-grid"></div>

                    <script type="text/javascript">
                            $(document).ready(function() {
                                $("#orders-grid").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("List", "CashierOrder"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: additionalData
                                            }
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors"
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        pageSize: @(defaultGridPageSize),
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable: {
                                        refresh: true,
                                        pageSizes: [@(gridPageSizes)],
                                        @await Html.PartialAsync("_GridPagerMessages")
                                    },
                                    scrollable: false,
                                    columns: [
                                        {
                                            field: "OrderCode",
                                            title: "@T("Xrms.Admin.Cashier.Orders.Fields.Code")"
                                        }, {
                                            field: "State",
                                            title: "@T("Xrms.Admin.Cashier.Orders.Fields.State")",
                                            width: 150
                                        }, {
                                            field: "TableName",
                                            title: "@T("Xrms.Admin.Cashier.Orders.Fields.Table")"
                                        }, {
                                            field: "CreatedOnUtc",
                                            title: "@T("Xrms.Admin.Cashier.Orders.Fields.CreatedTime")",
                                            width: 150
                                        }, {
                                            field: "UpdatedOnUtc",
                                            title: "@T("Xrms.Admin.Cashier.Orders.Fields.UpdatedTime")",
                                            width: 150
                                        }, {
                                            field: "BilledOnUtc",
                                            title: "@T("Xrms.Admin.Cashier.Orders.Fields.BilledTime")",
                                            width: 150
                                        }, {
                                            field: "AggregateId",
                                            title: "@T("Admin.Common.Edit")",
                                            width: 100,
                                            headerAttributes: { style: "text-align:center" },
                                            attributes: { style: "text-align:center" },
                                            template: '<a class="btn btn-default" href="Edit/#=AggregateId#"><i class="fa fa-pencil"></i>@T("Admin.Common.Edit")</a>'
                                        }
                                    ]
                                });
                            });
                    </script>

                    <script type="text/javascript">
                            $(document).ready(function() {
                                //search button
                                $('#search-orders').click(function() {
                                    //search
                                    var grid = $('#orders-grid').data('kendoGrid');
                                    grid.dataSource.page(1); //new search. Set page size to 1
                                    //grid.dataSource.read(); we already loaded the grid above using "page" function
                                    return false;
                                });

                                $("#@Html.IdFor(model => model.SearchModel.SearchTableName)").keydown(function(event) {
                                    if (event.keyCode == 13) {
                                        $("#search-orders").click();
                                        return false;
                                    }
                                });
                            });

                            function additionalData() {
                                var data = {
                                    SearchTableName: $('#@Html.IdFor(model => model.SearchModel.SearchTableName)').val()
                                };
                                addAntiForgeryToken(data);
                                return data;
                            }
                    </script>
                </div>
            </div>
            <div class="row">
                <div class="col-6">&nbsp;</div>
                <div class="col-6">
                    <ul id="messagesList"></ul>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/cashier-order-hub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    connection.on("CreatedOrderEvent", (message) => {
        //const encodedMsg = JSON.stringify(message);
        const encodedMsg = message.updatedOnUtc + ": Order [" + message.orderCode + "] has been created on table [" + message.tableName + "]";
        const li = document.createElement("li");
        li.textContent = encodedMsg;
        document.getElementById("messagesList").appendChild(li);
        /*public Guid AggregateId { get; set; }
        public int Version { get; set; }
        public int Id { get; set; }
        public int OrderId { get; set; }
        public int TableId { get; set; }
        public string TableName { get; set; }
        public string OrderCode { get; set; }
        public int State { get; set; }
        public int PrintCount { get; set; }
        public string BilledOnUtc { get; set; }
        public string CheckedOutOnUtc { get; set; }
        public string CreatedOnUtc { get; set; }
        public string UpdatedOnUtc { get; set; }
        public decimal SubTotalPrice { get; set; }*/
        var orderViewModel = {};
        orderViewModel.AggregateId = message.aggregateId;
        orderViewModel.OrderCode = message.orderCode;
        orderViewModel.TableName = message.tableName;
        orderViewModel.State = message.state;
        orderViewModel.CreatedOnUtc = message.createdOnUtc;
        orderViewModel.UpdatedOnUtc = message.updatedOnUtc;
        orderViewModel.BilledOnUtc = message.billedOnUtc;

        var grid = $('#orders-grid').data('kendoGrid');
        grid.dataSource.add(orderViewModel);

        // reload order list
        //var grid = $('#orders-grid').data('kendoGrid');
        //grid.dataSource.page(1);
    });

    connection.on("AddedOrderItemEvent", (message) => {
        //const encodedMsg = JSON.stringify(message);
        const encodedMsg = message.updatedOnUtc + ": [" + message.changedOrderItem.quantity + "] [" + message.changedOrderItem.productName + "] has been added in order [" + message.orderCode + "]";
        const li = document.createElement("li");
        li.textContent = encodedMsg;
        document.getElementById("messagesList").appendChild(li);

        // update order
        let orderId = message.aggregateId;
        let orderVersion = message.version;
        var orderItemsGridData = $("#orders-grid").data("kendoGrid").dataSource.data();
        var viewModel = orderItemsGridData.find(function (obj) { return obj.AggregateId === orderId; });
        if (viewModel != undefined) {
            // need to log here
            viewModel.set("State", message.state);
            viewModel.set("UpdatedOnUtc", message.updatedOnUtc);
        }
        else {
            alert("Not find order [" + message.orderCode + "] in the list. Reload orders from server.");
            // something error, should reload order list
            var grid = $('#orders-grid').data('kendoGrid');
            grid.dataSource.page(1);
        }
    });
    
    connection.on("ChangedOrderItemQuantityEvent", (message) => {
        //const encodedMsg = JSON.stringify(message);
        const encodedMsg = message.updatedOnUtc + ": [" + message.changedOrderItem.productName + "] has been changed quantity [" + message.changedOrderItem.quantity + "] in order [" + message.orderCode + "]";
        const li = document.createElement("li");
        li.textContent = encodedMsg;
        document.getElementById("messagesList").appendChild(li);

        let orderId = message.aggregateId;
        let orderVersion = message.version;
        var orderItemsGridData = $("#orders-grid").data("kendoGrid").dataSource.data();
        var viewModel = orderItemsGridData.find(function (obj) { return obj.AggregateId === orderId; });
        if (viewModel != undefined) {
            // need to log here
            viewModel.set("State", message.state);
            viewModel.set("UpdatedOnUtc", message.updatedOnUtc);
        }
        else {
            alert("Not find order [" + message.orderCode + "] in the list. Reload orders from server.");
            // something error, should reload order list
            var grid = $('#orders-grid').data('kendoGrid');
            grid.dataSource.page(1);
        }
    });

    connection.start().catch(err => console.error(err.toString()));

</script>